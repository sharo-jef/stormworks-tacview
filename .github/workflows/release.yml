name: Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release (e.g., v0.0.1). Leave empty to use the latest tag."
        required: false
        type: string

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  determine-tag:
    name: Determine release tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine tag
        id: tag
        shell: bash
        run: |
          if [ -n "${{ inputs.tag }}" ]; then
            echo "tag=${{ inputs.tag }}" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.ref_type }}" = "tag" ]; then
            echo "tag=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          else
            latest_tag="$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' --sort=-version:refname | head -n 1)"
            echo "tag=$latest_tag" >> "$GITHUB_OUTPUT"
          fi

  build:
    name: Build ${{ matrix.label }}
    runs-on: ${{ matrix.os }}
    needs: determine-tag
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            label: linux-x86_64
            archive_suffix: linux-x86_64.tar.gz
            binary_name: stormworks-tacview
          - os: macos-latest
            label: macos-x86_64
            archive_suffix: macos-x86_64.tar.gz
            binary_name: stormworks-tacview
          - os: windows-latest
            label: windows-x86_64
            archive_suffix: windows-x86_64.zip
            binary_name: stormworks-tacview.exe
    env:
      ASSET_PREFIX: stormworks-tacview-${{ needs.determine-tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.determine-tag.outputs.tag }}
          submodules: false

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build release binary
        run: cargo build --release --locked

      - name: Package binary (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -euo pipefail
          bin_path="target/release/${{ matrix.binary_name }}"
          # Strip binaries on Unix targets to reduce artifact size when possible.
          strip "$bin_path" 2>/dev/null || true
          archive_name="${ASSET_PREFIX}-${{ matrix.archive_suffix }}"
          tar -C target/release -czf "$archive_name" "${{ matrix.binary_name }}"
          echo "asset=$archive_name" >> "$GITHUB_OUTPUT"
        id: package_unix

      - name: Package binary (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $archiveName = "$env:ASSET_PREFIX-${{ matrix.archive_suffix }}"
          $binaryPath = "target/release/${{ matrix.binary_name }}"
          Compress-Archive -Path $binaryPath -DestinationPath $archiveName -Force
          "asset=$archiveName" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        id: package_windows

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.label }}
          path: ${{ steps.package_unix.outputs.asset || steps.package_windows.outputs.asset }}
          if-no-files-found: error

  publish:
    name: Publish Release
    needs: [determine-tag, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Display downloaded files
        run: ls -R dist

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.determine-tag.outputs.tag }}
          files: dist/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
